/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./001-asteroid-souls/app.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./001-asteroid-souls/app.js":
/*!***********************************!*\
  !*** ./001-asteroid-souls/app.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var config = {\r\n    type: Phaser.AUTO,\r\n    width: 800,\r\n    height: 600,\r\n    pixelArt: true,\r\n    physics: {\r\n        default: 'matter',\r\n        matter: {\r\n            debug: false,\r\n            gravity: { x:0, y: 0 },\r\n            friction: 0\r\n        }\r\n    },\r\n    scene: {\r\n        preload: preload,\r\n        create: create,\r\n        update: update\r\n    }\r\n};\r\n\r\nvar devMode = false;\r\n\r\n\r\n// ajax request to get high scores\r\nvar fetchHighScores = function () {\r\n    let apiURL = 'http://localhost:5000/hs';\r\n    if (devMode == false) {\r\n        apiURL = 'https://stately-app.herokuapp.com/hs'\r\n    }\r\n    let numberCheck = $.ajax({\r\n        url: apiURL,\r\n        type: 'GET',\r\n        data: {\r\n            gameName: 'asteroid-souls',\r\n            count: 10\r\n        },\r\n        dataType: 'json'\r\n    }).done(function(data) {\r\n        fetchedHighScores = data;\r\n        highScores = fetchedHighScores;\r\n    });\r\n};\r\n// update with new high scores every 10 seconds\r\nfetchHighScores();\r\nsetInterval(function() {\r\n    fetchHighScores()\r\n}, 10000);\r\n\r\n// ajax request to post high score\r\nvar postHighScore = function (name, score) {\r\n    let apiURL = 'http://localhost:5000/hs';\r\n    if (devMode == false) {\r\n        apiURL = 'https://stately-app.herokuapp.com/hs'\r\n    }\r\n    let numberCheck = $.ajax({\r\n        url: apiURL,\r\n        type: 'POST',\r\n        data: {\r\n            gameName: 'asteroid-souls',\r\n            scoreName: name,\r\n            scoreNumber: score\r\n        },\r\n    }).done(function(data) {\r\n        fetchHighScores();\r\n    });\r\n};\r\n\r\nvar nameKeyArray = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\r\n];\r\nvar nameKeyCSV = 'A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z';\r\nvar nameKeyScheme;\r\n\r\nvar game = new Phaser.Game(config);\r\nvar score;\r\nvar isMainMenu;\r\nvar isGameOver;\r\nvar isPlaying;\r\nvar highScores = [];\r\nvar fetchedHighScores = [];\r\n\r\nvar cursors;\r\nvar wasd;\r\nvar nameKey = [];\r\n\r\nvar controls;\r\nvar ship;\r\nvar shipAcc = .1;\r\nvar shipMaxSpeed = 5;\r\nvar shipRotationSpeed = .11;\r\nvar shipFriction = .020;\r\n\r\nvar fireBulletCooldown = 200;\r\nvar fireBulletTimer;\r\n\r\nvar bulletSpeed = 15;\r\nvar bulletMaxLifespan = 400;\r\n\r\nvar bulletList = [];\r\n\r\nvar asteroidMinSpeed = 1;\r\nvar asteroidMaxSpeed = 3;\r\nvar asteroidDivisor = 1.6;\r\nvar asteroidMaxDivisions = 5;\r\nvar asteroidList = [];\r\nvar asteroidImageNames = ['asteroid4'];\r\n\r\nvar allyCategory;\r\nvar enemyCategory;\r\n\r\nvar titleText;\r\nvar startText;\r\nvar gameOverText;\r\nvar scoreText;\r\nvar highScoresText;\r\nvar scoreNameText;\r\nvar highScoreNameText;\r\nvar userScoreNameText;\r\nvar userScoreText;\r\n\r\nvar name;\r\nvar maxNameLength = 6;\r\n\r\nfunction preload() {\r\n    this.load.setBaseURL('');\r\n    this.load.image('ship', 'assets/sprites/ship.png');\r\n    this.load.image('bullet', 'assets/sprites/bullet.png');\r\n    for (let i = 0; i < asteroidImageNames.length; ++i) {\r\n        this.load.image(asteroidImageNames[i], 'assets/sprites/' + asteroidImageNames[i] + '.png');\r\n    }\r\n}\r\n\r\nfunction create() {\r\n    isPlaying = false;\r\n    // controls setup\r\n    cursors = this.input.keyboard.createCursorKeys();\r\n    cursors.fire = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\r\n    cursors.start = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE);\r\n    wasd = {\r\n        up: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W),\r\n        down: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S),\r\n        left: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A),\r\n        right: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D),\r\n        fire: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.PERIOD),\r\n        start: this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.SPACE)\r\n    }\r\n\r\n    nameKey = this.input.keyboard.addKeys(nameKeyCSV);\r\n    nameKey['backspace'] = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.BACKSPACE);\r\n    nameKey['enter'] = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.ENTER);\r\n\r\n    controls = [cursors, wasd];\r\n\r\n    // collision setup\r\n    allyGroup = -1;\r\n    enemyGroup = -2;\r\n\r\n    // add collision listener\r\n    let self = this;\r\n    this.matter.world.on('collisionstart', function (event) {\r\n        let gameObjectA = event.pairs[0].bodyA.gameObject;\r\n        let gameObjectB = event.pairs[0].bodyB.gameObject;\r\n\r\n        let allyObject;\r\n        let enemyObject;\r\n        if (gameObjectA.body.collisionFilter.group == allyGroup) {\r\n            allyObject = gameObjectA;\r\n            enemyObject = gameObjectB;\r\n        } else {\r\n            allyObject = gameObjectB;\r\n            enemyObject = gameObjectA;\r\n        }\r\n        \r\n        if (allyObject.unitType == 'bullet') {\r\n            let arrIndex = bulletList.indexOf(allyObject);\r\n            bulletList.splice(arrIndex, 1);\r\n            allyObject.destroy();\r\n\r\n            if (enemyObject.unitType == 'asteroid') {\r\n                destroyAsteroid(self, enemyObject, enemyObject.rotation);\r\n            }\r\n        } else if (allyObject.unitType == 'ship') {\r\n            destroyAsteroid(self, enemyObject, enemyObject.rotation);\r\n            ship.destroy();\r\n            showGameOverMenu(self);\r\n            name = '';\r\n        } else {\r\n            console.error('Unknown unit type: ' + allyObject.unitType);\r\n        }\r\n    });\r\n\r\n    showMainMenu(this);\r\n}\r\n\r\nfunction reset() {\r\n    for (let i = 0; i < asteroidList.length; ++i) {\r\n        let asteroid = asteroidList[i];\r\n        asteroid.destroy();\r\n        asteroidList.splice(i, 1);\r\n        --i;\r\n    }\r\n    for (let i = 0; i < bulletList; ++i) {\r\n        let bullet = bulletList[i];\r\n        bullet.destroy();\r\n        bulletList.splice(i, 1);\r\n        --i;\r\n    }\r\n    if (ship != null) ship.destroy();\r\n\r\n    // reset values\r\n    isPlaying = false;\r\n    isGameOver = false;\r\n    //TODO\r\n    score = 0;\r\n}\r\n\r\nfunction init(self) {\r\n    hideMainMenu();\r\n    score = 0;\r\n    showScoreText(self);\r\n    updateScoreText();\r\n    // create ship\r\n    fireBulletTimer = 0;\r\n    isPlaying = true;\r\n    isMainMenu = false;\r\n    ship = self.matter.add.image(400, 100, 'ship').setCollisionGroup(allyGroup);\r\n    ship.setFriction(0, 0);\r\n    ship.setFixedRotation(true);\r\n    ship.unitType = 'ship';\r\n}\r\n\r\nfunction update() {\r\n    // these are terrible function names but i'm not just very creative\r\n    if (isMainMenu) {\r\n        startCheck(this);\r\n    } else if (isPlaying) {\r\n        // Keyboard listener\r\n        movementCheck();\r\n        fireBulletCheck(this);\r\n\r\n        // Bounds wrap\r\n        boundsWrap(this);\r\n        \r\n        // asteroids stuff\r\n        if (asteroidList.length == 0) {\r\n            createAsteroids(this);\r\n        }\r\n\r\n        // deletes bullet if they expire, and wraps them\r\n        manageBullets(this);\r\n        manageAsteroids(this);\r\n        \r\n    } else if (isGameOver) {\r\n        enterNameCheck(this);\r\n        updateNameText();\r\n    }\r\n}\r\n\r\n// on main menu, checks if user presses start\r\nfunction startCheck(self) {\r\n    let startPressed = false;\r\n    for (let i = 0; i < controls.length; ++i) {\r\n        let scheme = controls[i];\r\n        if (scheme.hasOwnProperty('start') && Phaser.Input.Keyboard.JustDown(scheme.start)) startPressed = true;\r\n    }\r\n    if (startPressed) {\r\n        init(self);\r\n        isMainMenu = false;\r\n    }\r\n}\r\n\r\n// only checks if backspace or enter is pressed, key press handled elsewhere\r\nfunction enterNameCheck(self) {\r\n    let enterPressed = false;\r\n    let backspacePressed = false;\r\n    let keyPressed;\r\n    for (let i = 0; i < nameKeyArray.length; ++i) {\r\n        let key = nameKeyArray[i];\r\n        if (Phaser.Input.Keyboard.JustDown(nameKey[key])) {\r\n            keyPressed = key;\r\n        }\r\n    }\r\n    if (Phaser.Input.Keyboard.JustDown(nameKey['enter'])) {\r\n        enterPressed = true;\r\n        tryPostScore();\r\n    }\r\n    if (Phaser.Input.Keyboard.JustDown(nameKey['backspace'])) {\r\n        backspacePressed = true;\r\n    }\r\n    if (enterPressed) { reset(self);\r\n        isMainMenu = true;\r\n        showMainMenu(self);\r\n        hideScoreText();\r\n    } else if (backspacePressed) {\r\n        if (name.length > 0) {\r\n            name = name.substring(0, name.length - 1);\r\n        }\r\n    } else if (typeof keyPressed != 'undefined') {\r\n        if (name.length < maxNameLength) {\r\n            name += keyPressed;\r\n        }\r\n    }\r\n}\r\n\r\nfunction hideScoreText() {\r\n    if (typeof scoreText != 'undefined') {\r\n        scoreText.setVisible(false);\r\n    }\r\n}\r\n\r\nfunction showScoreText(self) {\r\n    if (typeof scoreText == 'undefined') {\r\n        scoreText = self.add.text(10, 10, '', {\r\n            fontSize: '14px',\r\n            fontFamily: 'Cutive Mono'\r\n        });\r\n        scoreText.depth = 200;\r\n    }\r\n    scoreText.setVisible(true);\r\n}\r\n\r\n// moves the ship based on input keys\r\nfunction movementCheck() {\r\n    let upPressed = false;\r\n    let downPressed = false;\r\n    let leftPressed = false;\r\n    let rightPressed = false;\r\n    for (let i = 0 ; i < controls.length; ++i) {\r\n        let scheme = controls[i];\r\n        if (scheme.up.isDown) upPressed = true;\r\n        if (scheme.down.isDown) downPressed = true;\r\n        if (scheme.left.isDown) leftPressed = true;\r\n        if (scheme.right.isDown) rightPressed = true;\r\n    }\r\n    if (leftPressed && !rightPressed) {\r\n        ship.rotation -= shipRotationSpeed;\r\n        \r\n    } else if (rightPressed && !leftPressed) {\r\n        ship.rotation += shipRotationSpeed;\r\n    }\r\n    if (upPressed) {\r\n        let newVx = ship.body.velocity.x + shipAcc * Math.cos(ship.rotation);\r\n        let newVy = ship.body.velocity.y + shipAcc * Math.sin(ship.rotation);\r\n        ship.setVelocity(newVx, newVy);\r\n    }\r\n\r\n    applyFriction();\r\n\r\n    // prevents ship from going faster than its max speed\r\n    let currShipSpeedSquared = ship.body.velocity.y * ship.body.velocity.y + ship.body.velocity.x * ship.body.velocity.x;\r\n    if (currShipSpeedSquared > shipMaxSpeed * shipMaxSpeed) {\r\n        let currShipSpeed = Math.sqrt(currShipSpeedSquared);\r\n        let newVx = (ship.body.velocity.x / currShipSpeed) * shipMaxSpeed;\r\n        let newVy = (ship.body.velocity.y / currShipSpeed) * shipMaxSpeed;\r\n        ship.setVelocity(newVx, newVy);\r\n    }\r\n}\r\n\r\n// checks if user presses key to fire bullet\r\nfunction fireBulletCheck(self) {\r\n    let spacePressed = false;\r\n    for (let i = 0; i < controls.length; ++i) {\r\n        let scheme = controls[i];\r\n        if (Phaser.Input.Keyboard.JustDown(scheme.fire)) spacePressed = true;\r\n    }\r\n\r\n    if (spacePressed) {\r\n        let canFireBullet = (fireBulletTimer - self.time.now <= 0) ? true : false;\r\n        if (canFireBullet) {\r\n            fireBullet(self, ship.x, ship.y, ship.rotation);\r\n            fireBulletTimer = self.time.now + fireBulletCooldown;\r\n        }\r\n    }\r\n}\r\n\r\nfunction hideGameOverMenu() {\r\n    if (typeof gameOverText != 'undefined')\r\n        gameOverText.setVisible(false);\r\n\r\n    if (typeof highScoreText != 'undefined') {\r\n        highScoreText.setVisible(false);\r\n    }\r\n    if (typeof highScoreNameText != 'undefined')\r\n        highScoreNameText.setVisible(false);\r\n    if (typeof userScoreNameText != 'undefined')\r\n        userScoreText.setVisible(false);\r\n    if (typeof userScoreNameText != 'undefined')\r\n        userScoreNameText.setVisible(false);\r\n}\r\n\r\nfunction hideMainMenu() {\r\n    titleText.setVisible(false);\r\n    startText.setVisible(false);\r\n}\r\n\r\nfunction showGameOverMenu(self) {\r\n    isGameOver = true;\r\n    isPlaying = false;\r\n    \r\n    if (typeof gameOverText == 'undefined') {\r\n        gameOverText = self.add.text(config.width * .5, config.height * .1, 'You Died');\r\n        gameOverText.setOrigin(.5, 0);\r\n        gameOverText.setStyle({\r\n            fontSize: '30px',\r\n            fontFamily: 'Cutive Mono'\r\n        });\r\n        gameOverText.depth = -1;\r\n    }\r\n    let highScoreStyle = {\r\n        fontSize: '20px',\r\n        fontFamily: 'Cutive Mono'\r\n    };\r\n    if (typeof highScoreText == 'undefined') {\r\n        highScoreText = self.add.text(config.width * .65, config.height * .2, '');\r\n        highScoreText.setStyle(highScoreStyle);\r\n        highScoreText.setAlign('right');\r\n        highScoreText.setOrigin(.5, 0);\r\n        highScoreText.setLineSpacing(5);\r\n    }\r\n    if (typeof highScoreNameText == 'undefined') {\r\n        highScoreNameText = self.add.text(config.width *.35, config.height * .2, '');\r\n        highScoreNameText.setStyle(highScoreStyle);\r\n        highScoreNameText.setAlign('left');\r\n        highScoreNameText.setOrigin(.5, 0);\r\n        highScoreNameText.setLineSpacing(5);\r\n    }\r\n    if (typeof userScoreText == 'undefined') {\r\n        userScoreText = self.add.text(config.width * .65, config.height * .9, '');\r\n        userScoreText.setStyle(highScoreStyle);\r\n        userScoreText.setAlign('right');\r\n        userScoreText.setOrigin(.5, 0);\r\n    }\r\n    if (typeof userScoreNameText == 'undefined') {\r\n        userScoreNameText = self.add.text(config.width *.35, config.height * .9, '');\r\n        userScoreNameText.setStyle(highScoreStyle);\r\n        userScoreNameText.setAlign('left');\r\n        userScoreNameText.setOrigin(.5, 0);\r\n    }\r\n\r\n    updateHighScoreText();\r\n    userScoreText.setText(score);\r\n\r\n    gameOverText.setVisible(true);\r\n    highScoreText.setVisible(true);\r\n    highScoreNameText.setVisible(true);\r\n    userScoreText.setVisible(true);\r\n    userScoreNameText.setVisible(true);\r\n}\r\n\r\nfunction showMainMenu(self) {\r\n    hideGameOverMenu();\r\n    isMainMenu = true;\r\n    if (typeof titleText == 'undefined') {\r\n        titleText = self.add.text(config.width * .5, config.height * .35, 'Asteroid Souls');\r\n        titleText.setOrigin(.5);\r\n        titleText.setStyle({\r\n            fontSize: '30px',\r\n            fontFamily: 'Cutive Mono'\r\n        });\r\n    }\r\n    if (typeof startText == 'undefined') {\r\n        startText = self.add.text(config.width * .5, config.height * .35 + 30, 'Press Space to play');\r\n        startText.setOrigin(.5);\r\n        startText.setStyle({\r\n            fontSize: '14px',\r\n            fontFamily: 'Cutive Mono'\r\n        });\r\n    }\r\n    titleText.setVisible(true);\r\n    startText.setVisible(true);\r\n}\r\n\r\n\r\n// destroy asteroid and clean up references, asteroid splits if big or med\r\nfunction destroyAsteroid(self, asteroid, rotation) {\r\n    if (typeof rotation == 'undefined') {\r\n        rotation = 2 * Math.PI * Math.random();\r\n    }\r\n    score += 50;\r\n    updateScoreText();\r\n    let arrayIndex = asteroidList.indexOf(asteroid);\r\n    asteroidList.splice(arrayIndex, 1);\r\n    // splits the asteroid\r\n    if (asteroid.asteroidState < asteroidMaxDivisions) {\r\n        let splitAsteroid1 = createAsteroid(self, asteroid.x, asteroid.y, rotation - Math.PI / 6, asteroid.asteroidState + 1, asteroid.displayWidth / asteroidDivisor, asteroid.displayHeight / asteroidDivisor);\r\n        let speed = Math.random() * (asteroidMaxSpeed - asteroidMinSpeed) + asteroidMinSpeed;\r\n        splitAsteroid1.setVelocityX(speed * Math.cos(splitAsteroid1.rotation));\r\n        splitAsteroid1.setVelocityY(speed * Math.sin(splitAsteroid1.rotation));\r\n        asteroidList.push(splitAsteroid1);\r\n\r\n        let splitAsteroid2 = createAsteroid(self, asteroid.x, asteroid.y, rotation + Math.PI / 6, asteroid.asteroidState + 1, asteroid.displayWidth / asteroidDivisor, asteroid.displayHeight / asteroidDivisor);\r\n        speed = Math.random() * (asteroidMaxSpeed - asteroidMinSpeed) + asteroidMinSpeed;\r\n\r\n        splitAsteroid2.setVelocityX(speed * Math.cos(splitAsteroid2.rotation));\r\n        splitAsteroid2.setVelocityY(speed * Math.sin(splitAsteroid2.rotation));\r\n\r\n        asteroidList.push(splitAsteroid2);\r\n    }\r\n    asteroid.destroy();\r\n}\r\n\r\n// creates a single asteroid\r\nfunction createAsteroid(self, x, y, rotation, asteroidState, displayWidth, displayHeight) {\r\n    let randIndex = Math.floor(asteroidImageNames.length * Math.random());\r\n    let randAsteroidImageName = asteroidImageNames[randIndex];\r\n    let asteroid = self.matter.add.image(x, y, randAsteroidImageName).setCollisionGroup(enemyGroup);\r\n    if (typeof displayWidth != 'undefined' && typeof displayHeight != 'undefined') {\r\n        asteroid.setDisplaySize(displayWidth, displayHeight);\r\n    }\r\n    asteroid.setFriction(0, 0);\r\n    asteroid.setRotation(rotation);\r\n    asteroid.setFixedRotation(true);\r\n    let speed = Math.random() * (asteroidMaxSpeed - asteroidMinSpeed) + asteroidMinSpeed;\r\n    asteroid.asteroidState = asteroidState;\r\n    asteroid.unitType = 'asteroid';\r\n    asteroid.setVelocityX(speed * Math.cos(asteroid.rotation));\r\n    asteroid.setVelocityY(speed * Math.sin(asteroid.rotation));\r\n    return asteroid;\r\n}\r\n\r\n// create many asteroids when none exist (or are all destroyed)\r\nfunction createAsteroids(self) {\r\n    let asteroidLimit = 5;\r\n    let width = config.width;\r\n    let height = config.height;\r\n\r\n    for (let i = 0; i < asteroidLimit; ++i) {\r\n        let x, y;\r\n        // makes sure the asteroids spawn sufficiently far away from the ship\r\n        do {\r\n            x = Math.random() * width;\r\n            y = Math.random() * height;\r\n        } while (Math.abs(ship.x - x) < 64 + (32 + (ship.width / 2)) &&\r\n            Math.abs(ship.y - y) < 64 + (32 + (ship.height / 2)))\r\n\r\n        let asteroid = createAsteroid(self, x, y, Math.random() * 2 * Math.PI, 1);\r\n        asteroidList.push(asteroid);\r\n    }\r\n}\r\n\r\n\r\n// handles asteroids per frame, stuff like wrapping around bounds\r\nfunction manageAsteroids(self) {\r\n    let width = config.width;\r\n    let height = config.height;\r\n    for (let i = 0; i < asteroidList.length; ++i) {\r\n        let asteroid = asteroidList[i];\r\n        if (asteroid.body.velocity.x > 0 && asteroid.x - asteroid.displayWidth / 2 > width) {\r\n            asteroid.x -= width + asteroid.displayWidth;\r\n        } else if (asteroid.body.velocity.x < 0 && asteroid.x + asteroid.displayWidth / 2 < 0) {\r\n            asteroid.x += width + asteroid.displayWidth;\r\n        }\r\n\r\n        if (asteroid.body.velocity.y > 0 && asteroid.y - asteroid.displayHeight / 2 > height) {\r\n            asteroid.y -= height + asteroid.displayHeight;\r\n        } else if (asteroid.body.velocity.y < 0 && asteroid.y + asteroid.displayHeight / 2 < 0) {\r\n            asteroid.y += height + asteroid.displayHeight;\r\n        }\r\n    }\r\n}\r\n\r\n// handles bullets per frame, stuff like bullet expiration and bounds wrap\r\nfunction manageBullets(self) {\r\n    let width = config.width;\r\n    let height = config.height;\r\n    for (let i = 0; i < bulletList.length; ++i) {\r\n        let bullet = bulletList[i];\r\n\r\n        // destroy bullet if it exists for a certain time\r\n        if (self.time.now - bullet.createdAt > bulletMaxLifespan) {\r\n            bullet.destroy();\r\n            bulletList.splice(i, 1);\r\n            --i;\r\n            continue;\r\n        }\r\n\r\n        // wrap bullet around bounds\r\n        if (bullet.x > width) {\r\n            bullet.x -= width;\r\n        } else if (bullet.x < 0) {\r\n            bullet.x += width;\r\n        }\r\n\r\n        if (bullet.y > height) {\r\n            bullet.y -= height;\r\n        } else if (bullet.y < 0) {\r\n            bullet.y += height;\r\n        }\r\n    }\r\n}\r\n\r\n// ship fire bullet\r\nfunction fireBullet(self) {\r\n    let bullet = self.matter.add.image(ship.x, ship.y, 'bullet').setCollisionGroup(allyGroup);\r\n    bullet.unitType = 'bullet';\r\n    bullet.setFriction(0, 0);\r\n    bullet.setRotation(ship.rotation)\r\n    bullet.setFixedRotation(true);\r\n    bullet.x += Math.cos(bullet.rotation) * ship.width / 2;\r\n    bullet.y += Math.sin(bullet.rotation) * ship.height / 2;\r\n    bullet.setVelocityX(bulletSpeed * Math.cos(bullet.rotation));\r\n    bullet.setVelocityY(bulletSpeed * Math.sin(bullet.rotation));\r\n    bullet.createdAt = self.time.now;\r\n    bulletList.push(bullet);\r\n}\r\n\r\n// applies friction to the ship\r\nfunction applyFriction() {\r\n    let vxSign = (ship.body.velocity.x < 0) ? -1 : 1;\r\n    let vySign = (ship.body.velocity.y < 0) ? -1 : 1;\r\n\r\n    let newVx = ship.body.velocity.x - (vxSign * shipFriction);\r\n    let newVy = ship.body.velocity.y - (vySign * shipFriction);\r\n    \r\n    let newVxSign = (newVx < 0) ? -1 : 1;\r\n    let newVySign = (newVy < 0) ? -1 : 1;\r\n    if (vxSign != newVxSign) newVx = 0;\r\n    if (vySign != newVySign) newVy = 0;\r\n    ship.setVelocity(newVx, newVy);\r\n}\r\n\r\n// check if ship is out of bounds, and moves it to other side\r\nfunction boundsWrap(self) {\r\n    // inaccurate\r\n    let width = config.width;\r\n    let height = config.height;\r\n    if (ship.x > width) {\r\n        ship.x -= width;\r\n    } else if (ship.x < 0) {\r\n        ship.x += width;\r\n    }\r\n    if (ship.y > height) {\r\n        ship.y -= height;\r\n    } else if (ship.y < 0) {\r\n        ship.y += height;\r\n    }\r\n}\r\n\r\nfunction updateHighScoreText() {\r\n    let highScoreNameStr = '';\r\n    let highScoreStr = '';\r\n    highScoreNameStr += 'Name\\n';\r\n    highScoreStr += 'Score\\n';\r\n    for (let i = 0; i < highScores.length; ++i) {\r\n        let highScoreName = highScores[i].score_name;\r\n        let highScore = highScores[i].score_number;\r\n        highScoreStr += highScore + '\\n';\r\n        highScoreNameStr += highScoreName + '\\n';\r\n    }\r\n    highScoreText.setText(highScoreStr);\r\n    highScoreNameText.setText(highScoreNameStr);\r\n}\r\n\r\nfunction updateScoreText() {\r\n    if (typeof scoreText != 'undefined') {\r\n        scoreText.setText('Score: ' + score)\r\n    }\r\n}\r\n\r\nfunction updateNameText() {\r\n    let inputStr = name;\r\n    if (name.length < maxNameLength) {\r\n        inputStr += '_';\r\n    }\r\n    userScoreNameText.setText(inputStr);\r\n}\r\n\r\n// posts score if reaches requirements\r\nfunction tryPostScore() {\r\n    if (name.length > 0 && score >= 1000) {\r\n        postHighScore(name, score);\r\n    }\r\n}\n\n//# sourceURL=webpack:///./001-asteroid-souls/app.js?");

/***/ })

/******/ });